# This base_config file was partially populated using the template spacy config file.

[paths]
train = "data/train.spacy"
dev = "data/dev.spacy"
vectors = null
[system]
gpu_allocator = null

[nlp]
lang = "en"
pipeline = ["textcat"]
batch_size = 1000

[components]

[components.textcat]
factory = "textcat"

# token vectors calculated using a CNN. Vectors are mean pooled and used as features in a feed-forward network.  less accurate than the ensemble, but runs faster.
[components.textcat.model]
@architectures = "spacy.TextCatCNN.v2"
exclusive_classes = true
nO = null

[components.textcat.model.tok2vec]
@architectures = "spacy.HashEmbedCNN.v2"
pretrained_vectors = null
width = 96
depth = 4
embed_size = 2000
window_size = 1
maxout_pieces = 3
subword_features = true

[corpora]

# creates a Corpus of training or evaluation data
[corpora.train]
@readers = "spacy.Corpus.v1"
path = ${paths.train}
max_length = 0

[corpora.dev]
@readers = "spacy.Corpus.v1"
path = ${paths.dev}
max_length = 0

[training]
dev_corpus = "corpora.dev"
train_corpus = "corpora.train"

# ADAM works well compared to alternative stochastic optimization approaches
[training.optimizer]
@optimizers = "Adam.v1"

# specify batching strategy - minibatches roughly between  100-1000 words, excess words go in own batch
[training.batcher]
@batchers = "spacy.batch_by_words.v1"
discard_oversize = false
tolerance = 0.2

[training.batcher.size]
@schedules = "compounding.v1"
start = 100
stop = 1000
compound = 1.001

[initialize]
vectors = ${paths.vectors}
